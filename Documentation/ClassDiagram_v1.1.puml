@startuml

' ******************
' Classes
' ******************

class Main {
    + static void main(String[] args)
    - static String getDBPassword()
}

class FormulaOne {
    - final SessionCache sessionCache
    - static JFrame page

    + FormulaOne(String dbPassword)

    - void loadDB(String dbPassword)

    + void run()
    - void chooseSaveGame()

    + SessionCache getSessionCache()
    + static JFrame getPage()
}

class SessionCacheImpl implements ISessionCache {
    - final FormulaOne formulaOne
    - final int saveID
    - ArrayList<ISeason> seasons
    - ISeason currentSeason

    + SessionCacheImpl(FormulaOne formulaOne, int saveID)

    + void setCurrentSeason(ISeason currentSeason)
    + accessor methods()
}

class SeasonImpl implements ISeason {
    - final int year
    - final ArrayList<IRace> races
    - final ArrayList<ITeam> teams
    - final ITeamLeaderboard teamLeaderboard
    - final IDriverLeaderboard driverLeaderboard


    + SeasonImpl(int year, ArrayList<IRace> races, ArrayList<ITeam> teams)

    + boolean nextAction()
    + boolean isFinished()

    + accessor methods()
}

class TeamImpl implements ITeam {
    - final int id
    - final String name
    - final ICar car
    - final IDriver driver1
    - final IDriver driver2

    - int point

    + TeamImpl(int id, String name, Car car, IDriver driver1, IDriver driver2)

    + void addPoints(int points)
    + accessor methods()
}

class DriverImpl implements IDriver {
    ' TODO: TILFØJE ATTRIBUTES (Skal det være en klasse for sig selv?)
    - final int id
    - final String name
    - final int teamID
    - final int experience
    - final int corner
    - final int consistency
    - final int acceleration

    - int points

    + DriverImpl(int id, String name, int teamID)

    + void addPoints(int points)

    + accessor methods()
}

class CarImpl implements ICar {
    ' TODO: TILFØJE ATTRIBUTES (Skal det være en klasse for sig selv?)
    - final int id
    - final String name
    - final int horsePower
    - final int weight
    - final double aerodynamics
    - final double traction

    + CarImpl(int id, String name)

    + accessor methods()
}

class CircuitImpl implements ICircuit {
    ' TODO: TILFØJE ATTRIBUTES (Skal det være en klasse for sig selv?)
    - final int id
    - final String name
    - final String country
    - final int laps
    - final ArrayList<ICircuitComponent> components

    + CircuitImpl(int id, String name, String country, int laps, ArrayList<ICircuitComponent> components)

    + accessor methods()
}

class TeamLeaderboardImpl implements ITeamLeaderboard {
    - final ArrayList<ITeam> leaderboard

    + TeamLeaderboardImpl(ArrayList<ITeam> teams)

    + void update()

    + int getPlacement(ITeam team)
    + ITeam getByPlacement(int placement)
    + ArrayList<ITeam> getLeaderboard()
}

class DriverLeaderboardImpl implements IDriverLeaderboard {
    - final ArrayList<IDriver> leaderboard

    + DriverLeaderboardImpl(ArrayList<IDriver> drivers)

    + void update()

    + int getPlacement(IDriver driver)
    + IDriver getByPlacement(int placement)
    + ArrayList<IDriver> getLeaderboard()
}

' ******************
' DataBase Classes
' ******************

class DataBaseIO {
    - static final int saveID
    - static final String dbPassword
    - static final MySQL mySQL
    - static final FormulaOne formulaOne

    + static void initSQL(String dbPassword, boolean isNewSave, FormulaOne formulaOne)
    + static void saveData()
    + static void newSave()

    + static ArrayList<ITeam> loadTeamData()
    + static ArrayList<IDriver> loadDriverData()
    + static ArrayList<ICar> loadCarData()
    + static ArrayList<IRace> loadRaceData()
    + static ArrayList<ICircuit> loadCircuitData()
}

class MySQL {
    + helper methods()
}

class SQLStatements {
    + helper methods()
}

' ******************
' Race Classes
' ******************

class RaceImpl implements IRace {
    - final int id
    - final ICircuit circuit
    - IRaceResult raceResult
    - IRaceResult qualifierResult

    - boolean isFinished
    - boolean isStarted

    + RaceImpl(int id, ICircuit circuit)

    + void nextAction()

    - void startQualifier()
    - void startRace()

    + accessor methods()
}

class RaceResultImpl implements IRaceResult {
    - final ArrayList<IDriverResult> sortedResult
    - final Lap fastestLap

    + RaceResultImpl(ArrayList<IDriverResult> driverResults, Lap fastestLap)
    ' TODO: Vi skal sorterer resultatet vi får ind her

    + int getDriverPlacement(IDriver driver)
    + IDriverResult getDriverResult(IDriver driver)

    + boolean isQualifier()
    + boolean isRace()

    + IRaceResult asRaceResult()
    + IQualifierResult asQualifierResult()

    + accessor methods()
}

class QualifierResultImpl implements IQualifierResult {
    - final ArrayList<IDriverResult> sortedResult

    + QualifierResultImpl(ArrayList<IDriverResult> driverResults)
    ' TODO: Vi skal sorterer resultatet vi får ind her

    + int getDriverPlacement(IDriver driver)
    + IDriverResult getDriverResult(IDriver driver)

    + boolean isQualifier()
    + boolean isRace()

    + IRaceResult asRaceResult()
    + IQualifierResult asQualifierResult()

    + accessor methods()
}

class DriverResultImpl implements IDriverResult {
    - final IRace race
    - final IDriver driver
    - final ArrayList<Lap> laps

    - float time
    - boolean hasCrashed

    - int placement
    - int points
    - boolean hasFastestLap

    + DriverResult(IRace race, IDriver driver)

    + accessor methods()
}

class LapImpl implements ILap {
    - final IRace race
    - final IDriver driver
    - final float time

    + Lap(IRace race, IDriver driver, float time)

    + accessor methods()
}

' ******************
' Circuit Classes
' ******************

class CircuitComponentCornerImpl implements ICircuitComponent {
    - final int radius
    - final int angle

    + CircuitComponentCornerImpl(int radius, int angle)

    + accessor methods()
}

class CircuitComponentStraightImpl implements ICircuitComponent {
    - final int length

    + CircuitComponentStraightImpl(int length)

    + accessor methods()
}

' ******************
' UI Classes
' ******************

class ChooseSaveGameUI extends AUI {
    ' TODO: Når de laves
}

class MenuUI extends AUI {
    ' TODO: Når de laves
}

class CircuitUI extends AUI {
    ' TODO: Når de laves
}

' ******************
' Abstract Classes
' ******************

abstract class AUI implements IUI {
    ' TODO: Når de laves
}

' ******************
' Interfaces
' ******************

interface ITeam {
    + void addPoints(int points)

    + accessor methods()
}

interface IDriver {
    + void addPoints(int points)

    + accessor methods()
}

interface ICar {
    + accessor methods()
}

interface ISessionCache {
    + accessor methods()
}

interface ISeason {
    + boolean nextAction()
    + boolean hasNextAction()

    + accessor methods()
}

interface IRace {
    + void nextAction()

    + accessor methods()
}

interface ICircuit {
    + accessor methods()
}

interface ICircuitComponent {
    + accessor methods()
}

interface IResult {
    + int getDriverPlacement(IDriver driver)
    + IDriverResult getDriverResult(IDriver driver)

    + boolean isQualifier()
    + boolean isRace()

    + IRaceResult asRaceResult()
    + IQualifierResult asQualifierResult()

    + accessor methods()
}

interface IRaceResult extends IResult {
    + int getDriverPlacement(IDriver driver)
    + IDriverResult getDriverResult(IDriver driver)

    + accessor methods()
}

interface IQualifierResult extends IResult {
    + int getDriverPlacement(IDriver driver)
    + IDriverResult getDriverResult(IDriver driver)

    + accessor methods()
}

interface IDriverResult {
    + accessor methods()
}

interface ILap {
    + accessor methods()
}

interface IDriverLeaderboard {
    + void update()
    + int getIndex(IDriver driver)
    + IDriver getByIndex(int index)
    + ArrayList<IDriver> getLeaderboard()
}

interface ITeamLeaderboard {
    + void update()
    + int getIndex(ITeam team)
    + ITeam getByIndex(int index)
    + ArrayList<ITeam> getLeaderboard()
}

interface IUI {
    ' TODO: Når de laves
}

' ******************
' Enums
' ******************

enum WeatherCondition {
    SUNNY,
    RAINY
}

enum RaceState {
    NOT_STARTED,
    QUALIFIER_STARTED,
    QUALIFIER_FINISHED,
    RACE_STARTED,
    RACE_FINISHED
}

' ******************
' Relations
' ******************

Main --> FormulaOne

FormulaOne --> ISessionCache
FormulaOne --> IUI

SessionCacheImpl --> ISeason

SeasonImpl --> ITeam
SeasonImpl --> IRace
SeasonImpl --> ITeamLeaderboard
SeasonImpl --> IDriverLeaderboard

RaceImpl --> ICircuit
RaceImpl --> IResult

RaceResultImpl --> IDriverResult
QualifierResultImpl --> IDriverResult
DriverImpl --> IDriverResult

DriverResultImpl --> ILap

TeamImpl --> ICar
TeamImpl --> IDriver

CircuitImpl --> ICircuitComponent

DataBaseIO --> MySQL

@enduml