@startuml

' ******************
' Classes
' ******************

class Main {
    + static void main(String[] args)
}

class FormulaOne {
    - final ISessionCache sessionCache
    - static JFrame page

    + FormulaOne()

    - void loadDB()

    + void run()
    - void chooseSaveGame()

    + ISessionCache getSessionCache()
    + static JFrame getPage()
}

class SessionCacheImpl implements ISessionCache {
    - final FormulaOne formulaOne
    - final int saveID
    - final ArrayList<ISeason> seasons
    - ISeason currentSeason
    - IUser currentUser

    + SessionCacheImpl(FormulaOne formulaOne, int saveID)

    + void setCurrentSeason(ISeason currentSeason)
    + setCurrentUser(IUser currentUser)

    + accessor methods()
}

class SeasonImpl implements ISeason {
    - final int year
    - final ArrayList<IRace> races
    - final ArrayList<ITeam> teams
    - final ITeamLeaderboard teamLeaderboard
    - final IDriverLeaderboard driverLeaderboard
    - IRace currentRace

    + SeasonImpl(int year, ArrayList<IRace> races, ArrayList<ITeam> teams)

    + Action nextAction()
    + void updateLeaderboards()
    + boolean hasNextAction()

    + void setCurrentRace(IRace currentRace)
    + accessor methods()
}

class TeamImpl implements ITeam {
    - final int id
    - final String name
    - final ICar car
    - final IDriver driver1
    - final IDriver driver2



    + TeamImpl(int id, String name, ICar car, IDriver driver1, IDriver driver2)

    + void getPoints()

    + accessor methods()
}

class DriverImpl implements IDriver {
    - final int id
    - final String name
    - final int teamID
    - final int points
    - final int experience
    - final int corner
    - final int consistency
    - final int acceleration

    + DriverImpl(int id, String name, int teamID, int experience, int corner, int consistency, int acceleration)

    + void addPoints(int points)

    + accessor methods()
}

class CarImpl implements ICar {
    - final int id
    - final String name
    - final int horsePower
    - final int weight
    - final double aerodynamics
    - final double traction

    + CarImpl(int id, String name, int horsePower, int weight, double aerodynamics, double traction)

    + accessor methods()
}

class CircuitImpl implements ICircuit {
    - final int id
    - final String name
    - final String country
    - final int laps
    - final ArrayList<ICircuitComponent> components

    + CircuitImpl(int id, String name, String country, int laps, ArrayList<ICircuitComponent> components)

    + accessor methods()
}

class TeamLeaderboardImpl implements ITeamLeaderboard {
    - final ArrayList<ITeam> leaderboard

    + TeamLeaderboardImpl(ArrayList<ITeam> teams)

    + void update()

    + int getPlacement(ITeam team)
    + ITeam getByPlacement(int placement)
    + ArrayList<ITeam> getLeaderboard()
}

class DriverLeaderboardImpl implements IDriverLeaderboard {
    - final ArrayList<IDriver> leaderboard

    + DriverLeaderboardImpl(ArrayList<IDriver> drivers)

    + void update()

    + int getPlacement(IDriver driver)
    + IDriver getByPlacement(int placement)
    + ArrayList<IDriver> getLeaderboard()
}

' ******************
' DataBase Classes
' ******************

class DataBaseIO {
    - static final int saveID
    - static final String dbPassword
    - static final MySQL mySQL
    - static final FormulaOne formulaOne

    + static void initSQL(String dbPassword, boolean isNewSave, FormulaOne formulaOne)
    + static void saveData()
    + static void newSave()

    + static ArrayList<ITeam> loadTeamData()
    + static ArrayList<IDriver> loadDriverData()
    + static ArrayList<ICar> loadCarData()
    + static ArrayList<IRace> loadRaceData()
    + static ArrayList<ICircuit> loadCircuitData()
}

class MySQL {
    + helper methods()
}

class SQLStatements {
    + helper methods()
}

' ******************
' Race Classes
' ******************

class RaceImpl implements IRace {
    - private final int year
    - final ICircuit circuit
    - final ArrayList<ITeam> teams
    - final ArrayList<IDriver> drivers

    - IResult result
    - RaceState state

    + RaceImpl(int year, ICircuit circuit, ArrayList<ITeam> teams)

    + void nextAction()

    - void startRace()
    - ILap driveLap(int lap, (ArrayList<IDriverResult> results, ILap fastestLap)
    - float getLapTime()
    - boolean crashesThisLap(IDriverResult result)
    - getFastestLap(ILap fastestLap, ILap newLap)
    - setPlacements(ArrayList<IDriverResult> results)
    - void sortDriverResults(ArrayList<IDriverResult> results)
    - ArrayList<IDriverResult> createDriverResults(ArrayList<IDriver> gridList)
    - void printResult()
    'TODO: Is the above a proper method or just for testing?
    - void setState(RaceState state)

    + accessor methods()
}

class RaceResultImpl implements IRaceResult {
    - final ArrayList<IDriverResult> sortedResult
    - final ILap fastestLap

    + RaceResultImpl(ArrayList<IDriverResult> driverResults, ILap fastestLap)

    + int getDriverPlacement(IDriver driver)
    + IDriverResult getDriverResult(IDriver driver)

    + boolean isQualifier()
    + boolean isRace()

    + IRaceResult asRaceResult()
    + IQualifierResult asQualifierResult()

    + accessor methods()
}

class QualifierImpl implements IQualifier {
    - final HashMap<IDriver, ILap> fastestLaps
    - final ArrayList<IDriver> drivers
    - final IRace race
    - IQualifierResult result

    + QualifierImpl(IRace race, ArrayList<IDriver> drivers)

    + void start()
    - void setPlacements(ArrayList<IDriverResult> results)
    - ArrayList<IDriverResult> createDriverResults()
    - void driveLaps(IDriver driver, int numberOfLaps)
    - void driveLap(IDriver driver, int lapNumber)
    - void printResult()



}

class QualifierResultImpl implements IQualifierResult {
    - final ArrayList<IDriverResult> sortedResult

    + QualifierResultImpl(ArrayList<IDriverResult> driverResults)

    + int getDriverPlacement(IDriver driver)
    + IDriverResult getDriverResult(IDriver driver)
    + ArrayList>IDriverResult> getGridList()

    + boolean isQualifier()
    + boolean isRace()

    + IRaceResult asRaceResult()
    + IQualifierResult asQualifierResult()

    + accessor methods()
}

class DriverResultImpl implements IDriverResult {
    - final IRace race
    - final IDriver driver
    - final ArrayList<ILap> laps
    - final boolean isRace
    - float time
    - boolean hasCrashed

    - int placement
    - int points
    - boolean hasFastestLap

    + DriverResultImpl(IRace race, IDriver driver, ArrayList<Ilap> laps, boolean isRace)

    + void setPlacement(int placement)
    + void setHasFastestLap(boolean hasFastestLap)
    + void setHasCrashed(boolean hasCrashed)
    + void addLap(ILap lap)
    + void addPointsToDriver(int points)


    + accessor methods()
}

class LapImpl implements ILap {
    - final IRace race
    - final IDriver driver
    - final int lapNumber
    - final float time

    + Lap(IRace race, IDriver driver, int lapNumber, float time)

    + accessor methods()
}

' ******************
' Circuit Classes
' ******************

class CircuitComponentCornerImpl implements ICircuitComponent {
    - final int radius
    - final int angle
    - final Direction from
    - final Direction to

    + CircuitComponentCornerImpl(int radius, int angle, Direction from, Direction to)

    + accessor methods()
}

class CircuitComponentStraightImpl implements ICircuitComponent {
    - final int length
    - final Direction from
    - final Direction to

    + CircuitComponentStraightImpl(int length, Direction from, Direction to)

    + accessor methods()
}

' ******************
' UI Classes
' ******************

class ChooseSaveGameUI extends AUI {
    ' TODO: Når de laves
}

class MenuUI extends AUI {
    ' TODO: Når de laves
}

class CircuitUI extends AUI {
    ' TODO: Når de laves
}

' ******************
' Abstract Classes
' ******************

abstract class AUI implements IUI {
    ' TODO: Når de laves
}

' ******************
' Interfaces
' ******************

interface ITeam {
    + accessor methods()
}

interface IDriver {
    + void addPoints(int points)

    + accessor methods()
}

interface ICar {
    + accessor methods()
}

interface ISessionCache {
    + void setCurrentSeason(ISeason currentSeason)
    + void setCurrentUser(IUser user)

    + accessor methods()
}

interface ISeason {
    + Action nextAction()
    + void updateLeaderboards()
    + boolean hasNextAction()
    + void setCurrentRace(IRace currentRace)

    + accessor methods()
}

interface IRace {
    + void nextAction()
    + void setState(RaceState state)

    + accessor methods()
}

interface ICircuit {
    + accessor methods()
}

interface ICircuitComponent {
    + accessor methods()
}

interface IResult {
    + int getDriverPlacement(IDriver driver)
    + IDriverResult getDriverResult(IDriver driver)

    + boolean isQualifier()
    + boolean isRace()

    + IRaceResult asRaceResult()
    + IQualifierResult asQualifierResult()

    + accessor methods()
}

interface IRaceResult extends IResult {
    + ILap getFastestLap()
}

interface IQualifier {
    + void start()

    + accessor methods()
}

interface IQualifierResult extends IResult {
    + ArrayList<IDriver> getGridList()
}

interface IDriverResult {
    + void setPlacements(int placement)
    + void setHasFastestLap(boolean hasFastestLap)
    + void setHasCrashed(boolean hasCrashed)
    + void addLap(ILap lap)
    + void addPointsToDriver()

    + accessor methods()
}

interface ILap {
    + accessor methods()
}

interface IDriverLeaderboard {
    + void update()
    + int getPlacement(IDriver driver)
    + IDriver getByPlacement(int placement))
    + ArrayList<IDriver> getLeaderboard()
}

interface ITeamLeaderboard {
    + void update()
    + int getPlacement(ITeam team)
    + ITeam getByPlacement(int placement))
    + ArrayList<ITeam> getLeaderboard()
}

interface IUI {
    ' TODO: Når de laves
}

' ******************
' Enums
' ******************

enum WeatherCondition {
    SUNNY,
    RAINY
}

enum RaceState {
    NOT_STARTED,
    QUALIFIER_STARTED,
    QUALIFIER_FINISHED,
    RACE_STARTED,
    RACE_FINISHED
}

' ******************
' Relations
' ******************

Main --> FormulaOne

FormulaOne --> ISessionCache
FormulaOne --> IUI

SessionCacheImpl --> ISeason

SeasonImpl --> ITeam
SeasonImpl --> IRace
SeasonImpl --> ITeamLeaderboard
SeasonImpl --> IDriverLeaderboard

RaceImpl --> ICircuit
RaceImpl --> IResult
RaceImpl --> IQualifier
RaceResultImpl --> IDriverResult
QualifierResultImpl --> IDriverResult
DriverImpl --> IDriverResult

DriverResultImpl --> ILap

TeamImpl --> ICar
TeamImpl --> IDriver

CircuitImpl --> ICircuitComponent

DataBaseIO --> MySQL

@enduml