@startuml

' ******************
' Classes
' ******************

class Main {
    + static void main(String[] args)
}

class FormulaOne {
    - final ISessionCache sessionCache
    - static JFrame page

    + FormulaOne()

    - void loadDB()

    + void run()
    - void chooseSaveGame()
    - void initUI()

    + ISessionCache getSessionCache()
    + static JFrame getPage()
}

class SessionCacheImpl implements ISessionCache {
    - final FormulaOne formulaOne
    - final int saveID
    - final ArrayList<ISeason> seasons
    - ISeason currentSeason
    - IUser currentUser

    + SessionCacheImpl(FormulaOne formulaOne, int saveID)

    + void setCurrentSeason(ISeason currentSeason)
    + void setCurrentUser(IUser currentUser)
    + void setTeams(ArrayList<ITeam> teams)

    + accessor methods()
}

class SeasonImpl implements ISeason {
    - final int year
    - final ArrayList<IRace> races
    - ArrayList<ITeam> teams
    - ITeamLeaderboard teamLeaderboard
    - IDriverLeaderboard driverLeaderboard
    - IRace currentRace

    + SeasonImpl(int year, ArrayList<IRace> races)

    + Action nextAction()
    + void updateLeaderboards()
    + boolean hasNextAction()
    - void createRaces()

    + void setCurrentRace(IRace currentRace)
    + void setTeams(ArrayList<ITeam> teams)
    + accessor methods()
}

class TeamImpl implements ITeam {
    - final int id
    - final String name
    - final ICar car
    - final IDriver driver1
    - final IDriver driver2

    + TeamImpl(int id, String name, ICar car, IDriver driver1, IDriver driver2)

    + void getPoints()

    + accessor methods()
}

class DriverImpl implements IDriver {
    - final int id
    - final String name
    - ITeam team
    - int points
    - final int experience
    - final int corner
    - final int consistency
    - final int acceleration

    + DriverImpl(int id, String name, int experience, int corner, int consistency, int acceleration)

    + void addPoints(int points)
    + void setTeam(ITeam team)

    + accessor methods()
}

class CarImpl implements ICar {
    - final int id
    - final String name
    - final int horsePower
    - final int weight
    - final double aerodynamics
    - final double traction

    + CarImpl(int id, String name, int horsePower, int weight, double aerodynamics, double traction)

    + accessor methods()
}

class CircuitImpl implements ICircuit {
    - final int id
    - final String name
    - final String country
    - final int laps
    - final ArrayList<ICircuitComponent> components

    + CircuitImpl(int id, String name, String country, int laps, ArrayList<ICircuitComponent> components)

    + accessor methods()
}

class TeamLeaderboardImpl implements ITeamLeaderboard {
    - final ArrayList<ITeam> leaderboard

    + TeamLeaderboardImpl(ArrayList<ITeam> teams)

    + void update()

    + int getPlacement(ITeam team)
    + ITeam getByPlacement(int placement)
    + ArrayList<ITeam> getLeaderboard()
}

class DriverLeaderboardImpl implements IDriverLeaderboard {
    - final ArrayList<IDriver> leaderboard

    + DriverLeaderboardImpl(ArrayList<IDriver> drivers)

    + void update()

    + int getPlacement(IDriver driver)
    + IDriver getByPlacement(int placement)
    + ArrayList<IDriver> getLeaderboard()
}

class UserImpl implements IUser {
    - ITeam team

    + UserImpl(ITeam team)

    + accessor methods()
}

' ******************
' DataBase Classes
' ******************

class DataBaseIO {
    - static final String databaseName
    - static FormulaOne formulaOne
    - static IMySQL mySQL
    - static ArrayList<IDriver> cachedDrivers
    - static ArrayList<ICar> cachedCars
    - static ArrayList<ITeam> cachedTeams

    + static void initSQL(boolean isNewSave, FormulaOne formulaOne)
    + static void saveData()

    + static ArrayList<ITeam> loadDefaultTeamData()
    + static ArrayList<IDriver> loadDefaultDriverData()
    + static ArrayList<ICar> loadDefaultCarData()
    + static ArrayList<IRace> loadRaceData()
    - static IDriverResult loadDriverResult(IDriver driver, IRace race, int resultID)
    - static ArrayList<ILap> loadLapData(int resultID, IRace race, IDriver driver)
    - static String getPassword()
}

' ******************
' Race Classes
' ******************

class RaceImpl implements IRace {
    - private final int year
    - final ICircuit circuit
    - final ArrayList<ITeam> teams
    - final ArrayList<IDriver> drivers
    - final IQualifier qualifier
    - final WeatherCondition weatherCondition
    - final HashMap<IDriver, Double> driverCurrentSpeedMap

    - IResult result
    - RaceState state

    + RaceImpl(int year, ICircuit circuit, ArrayList<ITeam> teams)

    + void nextAction()

    - void startRace()
    - ILap driveLap(int lap, ArrayList<IDriverResult> results, ILap fastestLap)
    + float getLapTime(IDriver driver)
    - boolean crashesThisLap(IDriverResult result)
    - ILap getFastestLap(ILap fastestLap, ILap newLap)
    - void setPlacements(ArrayList<IDriverResult> results)
    - void sortDriverResults(ArrayList<IDriverResult> results)
    - ArrayList<IDriverResult> createDriverResults(ArrayList<IDriver> gridList)
    - void printResult()
    + void setState(RaceState state)
    + void setNewSpeed(IDriver driver, double speed)

    + accessor methods()
    - ArrayList<ITeam> getTeams()
    - ArrayList<IDriver> getDrivers()
}

class RaceResultImpl implements IRaceResult {
    - final ArrayList<IDriverResult> sortedResult
    - final ILap fastestLap

    + RaceResultImpl(ArrayList<IDriverResult> driverResults, ILap fastestLap)

    + int getDriverPlacement(IDriver driver)
    + IDriverResult getDriverResult(IDriver driver)

    + boolean isQualifier()
    + boolean isRace()

    + IRaceResult asRaceResult()
    + IQualifierResult asQualifierResult()

    + accessor methods()
}

class QualifierImpl implements IQualifier {
    - final HashMap<IDriver, ILap> fastestLaps
    - final ArrayList<IDriver> drivers
    - final IRace race

    - IQualifierResult result

    + QualifierImpl(IRace race, ArrayList<IDriver> drivers)

    + void start()
    - void setPlacements(ArrayList<IDriverResult> results)
    - ArrayList<IDriverResult> createDriverResults()
    - void driveLaps(IDriver driver, int numberOfLaps)
    - void driveLap(IDriver driver, int lapNumber)
    - void printResult()

    + IRace getRace()
    + IQualifierResult getResult()
    - ArrayList<IDriver> getDrivers()
}

class QualifierResultImpl implements IQualifierResult {
    - final ArrayList<IDriverResult> sortedResult

    + QualifierResultImpl(ArrayList<IDriverResult> driverResults)

    + int getDriverPlacement(IDriver driver)
    + IDriverResult getDriverResult(IDriver driver)
    + ArrayList<IDriverResult> getGridList()

    + boolean isQualifier()
    + boolean isRace()

    + IRaceResult asRaceResult()
    + IQualifierResult asQualifierResult()

    + accessor methods()
}

class DriverResultImpl implements IDriverResult {
    - final IRace race
    - final IDriver driver
    - final ArrayList<ILap> laps
    - final boolean isRace

    - float time
    - boolean hasCrashed

    - int placement
    - int points
    - boolean hasFastestLap

    + DriverResultImpl(IRace race, IDriver driver, ArrayList<ILap> laps, boolean isRace)

    + void setPlacement(int placement)
    + void setFastestLapStatus(boolean fastestLapStatus)
    + void setCrashStatus(boolean crashStatus)
    + void addLap(ILap lap)
    - void addPointsToDriver(int points)

    + accessor methods()
}

class LapImpl implements ILap {
    - final IRace race
    - final IDriver driver
    - final int lapNumber
    - final float time

    + Lap(IRace race, IDriver driver, int lapNumber, float time)

    + accessor methods()
}

class RaceAlgorithmCornerImpl implements IRaceAlgorithmCorner {
    + RaceAlgorithmCornerImpl()
    + double getTime(IRace race, IDriver driver, ICar car, ICircuitComponent circuitComponent, double currentSpeed)
    - double getSpeed(ICar car, ICircuitComponent circuitComponent)
    - double getSpeedProcent(ICar car, WeatherCondition weather)
}

class RaceAlgorithmStraightImpl implements IRaceAlgorithmStraight {
    - final double dTime

    + RaceAlgorithmStraightImpl()
    + double getTime(IRace race, IDriver driver, ICar car, ICircuitComponent circuitComponent, double currentSpeed)
    - double getAcceleration(ICar car, double currentSpeed)
    - double getSpeed(double currentSpeed. double currentAcceleration)
    - double getSpeedProcent(IDriver driver, WeatherCondition weather)
}

' ******************
' Circuit Classes
' ******************

class CircuitComponentCornerImpl implements ICircuitComponentCorner {
    - final int radius
    - final int angle
    - final Direction from
    - final Direction to

    + CircuitComponentCornerImpl(int radius, int angle, Direction from, Direction to)

    + accessor methods()
}

class CircuitComponentStraightImpl implements ICircuitComponentStraight {
    - final int length
    - final Direction from
    - final Direction to

    + CircuitComponentStraightImpl(int length, Direction from, Direction to)

    + accessor methods()
}

class CircuitBuilder {

  + CircuitBuilder()
  + ArrayList<ICircuit> createCircuits()
  }


' ******************
' UI Classes
' ******************

class ChooseTeamUI extends AUI {
    - UI Elements

    + ChooseTeamUI(FormulaOne formulaOne)
    + void setData(ChooseTeamUI data)
    + void getData(ChooseTeamUI data)

    + accessor methods()
}

class MenuUI extends AUI {
    - UI Elements

    + MenuUI(FormulaOne formulaOne)
    + void setData(MenuUI data)
    + void getData(MenuUI data)
    + void updatePane(IUI ui)
    - void setListData()
    - void setOnClick()
    - void setFonts()
    + boolean isModified(MenuUI data)

    + accessor methods()
}

' ******************
' Abstract Classes
' ******************

abstract class AUI implements IUI {
    + AUI()

    + void updatePane(IUI ui)
    + accessor methods()
}

' ******************
' Interfaces
' ******************

interface ITeam {
    + accessor methods()
}

interface IDriver {
    + void addPoints(int points)
    + void setTeam(ITeam team)

    + accessor methods()
}

interface ICar {
    + accessor methods()
}

interface IUser {
    + accessor methods()
}

interface ISessionCache {
    + void setCurrentSeason(ISeason currentSeason)
    + void setCurrentUser(IUser user)
    + void setTeams(ArrayList<ITeam> teams)

    + accessor methods()
}

interface ISeason {
    + Action nextAction()
    + void updateLeaderboards()
    + boolean hasNextAction()
    + void setCurrentRace(IRace currentRace)
    + void setTeams(ArrayList<ITeam> teams)

    + accessor methods()
}

interface IRace {
    + void nextAction()
    + void setState(RaceState state)
    + float getLapTime(IDriver driver)
    + void setNewSpeed(IDriver driver, double speed)

    + accessor methods()
}

interface ICircuit {
    + accessor methods()
}

interface ICircuitComponent {
    + boolean isCorner()
    + boolean isStraight()

    + ICircuitComponentCorner asCorner()
    + ICircuitComponentStraight asStraight()
}

interface ICircuitComponentCorner extends ICircuitComponent {
    + accessor methods()
}

interface ICircuitComponentStraight extends ICircuitComponent {
    + accessor methods()
}

interface IResult {
    + int getDriverPlacement(IDriver driver)
    + IDriverResult getDriverResult(IDriver driver)

    + boolean isQualifier()
    + boolean isRace()

    + IRaceResult asRaceResult()
    + IQualifierResult asQualifierResult()

    + accessor methods()
}

interface IRaceResult extends IResult {
    + ILap getFastestLap()
}

interface IQualifier {
    + void start()

    + accessor methods()
}

interface IQualifierResult extends IResult {
    + ArrayList<IDriver> getGridList()
}

interface IDriverResult {
    + void setPlacements(int placement)
    + void setHasFastestLap(boolean hasFastestLap)
    + void setHasCrashed(boolean hasCrashed)
    + void addLap(ILap lap)
    + void addPointsToDriver()
    + boolean isRace()
    + boolean isQualifier()

    + accessor methods()
}

interface ILap {
    + accessor methods()
}

interface IDriverLeaderboard {
    + void update()
    + int getPlacement(IDriver driver)
    + IDriver getByPlacement(int placement))
    + ArrayList<IDriver> getLeaderboard()
}

interface ITeamLeaderboard {
    + void update()
    + int getPlacement(ITeam team)
    + ITeam getByPlacement(int placement))
    + ArrayList<ITeam> getLeaderboard()
}

interface IRaceAlgorithm {
    double getTime(IRace race, IDriver driver, ICar car, ICircuitComponent circuitComponent, double currentSpeed)
}

interface IRaceAlgorithmCorner extends IRaceAlgorithm { }

interface IRaceAlgorithmStraight extends IRaceAlgorithm { }

interface IUI {
    + void updatePane(IUI ui)

    + accessor methods()
}

' ******************
' Enums
' ******************

enum WeatherCondition {
    SUNNY,
    RAINY
}

enum RaceState {
    NOT_STARTED,
    QUALIFIER_STARTED,
    QUALIFIER_FINISHED,
    RACE_STARTED,
    RACE_FINISHED
}

enum Action {
    COMPLETE,
    SEASON_FINISHED,
    RACE_NOT_FINISHED
}

' ******************
' Relations
' ******************

Main --> FormulaOne

FormulaOne --> ISessionCache
FormulaOne --> IUI

SessionCacheImpl --> ISeason
SessionCacheImpl --> IUser

SeasonImpl --> ITeam
SeasonImpl --> IRace
SeasonImpl --> ITeamLeaderboard
SeasonImpl --> IDriverLeaderboard
SeasonImpl --> CircuitBuilder

RaceImpl --> ICircuit
RaceImpl --> IResult
RaceImpl --> IQualifier
RaceImpl --> IRaceAlgorithm
RaceResultImpl --> IDriverResult
QualifierResultImpl --> IDriverResult
DriverImpl --> IDriverResult

DriverResultImpl --> ILap

TeamImpl --> ICar
TeamImpl --> IDriver

CircuitImpl --> ICircuitComponent

@enduml